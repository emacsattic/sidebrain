\input texinfo   @c -*-texinfo-*-
@c %**start of header
@setfilename sidebrain.info
@settitle Sidebrain manual
@dircategory Software development
@direntry
* Sidebrain (sidebrain)       A programmers' memory aide
@end direntry
@c %**end of header
@c  Status: in progress
@titlepage
@sp 10
@title{Sidebrain}
@author{J. C. G. Sturdy}
@c The following two commands start the copyright page.
@page
@vskip 0pt plus 1filll
Copyright @copyright{} 2005, 2006 John C. G. Sturdy
@end titlepage
@node Top, Basic Operations, (dir), (dir)

Sidebrain is a programmer's memory aid, looking after a stack of tasks
and subtasks, and a queue or pool of tasks that are not on the stack.
It also keeps a collection of notes that you have made, associated
with the tasks.

Sidebrain can read (and update) ``to do'' comments in source files.

Having the computer look after this part of your cognitive load may
give your real brain more space to get on with doing the real
thinking. It can also help you to organise your work more effectively,
and to stay focused. 

If you keep your sidebrain information up-to-date, you may well find
it easier to resume your work at the start of each day; in turn, this
may make it easier for you to put your work down and reduce the drive
to remain at your computer when it would be better to get on with
something else.

@menu
* Basic Operations::            Basic Operations
* Working with projects::       Working with projects
* Browsing the task queue::     The task queue browser
* Saving and restoring::        Saving and restoring
* Using comments in files::     Using comments in files
* Installation and configuration::  Installation and configuration

@detailmenu
 --- The Detailed Node Listing ---

Basic Operations

* Beginning and ending tasks::  Beginning and ending tasks
* Suspending and resuming tasks::  Suspending and resuming tasks
* Observations::                Observations
* Creating reminders::          Creating reminders

Beginning and ending tasks

* Beginning tasks::             Beginning tasks
* Ending tasks::                Ending tasks

Working with projects

* Creating projects and groups::  
* Selecting projects and groups::  
* Deleting projects and groups::  
* Task priorities::             

Selecting projects and groups

* Selecting project groups::    Selecting project groups
* Selecting projects::          Selecting projects within a project group

Installation and configuration

* Installing sidebrain::        Installing sidebrain
* Configuring sidebrain::       Configuring sidebrain

Configuring sidebrain

* Controlling the sidebrain display::  
* Customizing the save::        

@end detailmenu
@end menu

@node  Basic Operations, Working with projects, Top, Top
@comment  node-name,  next,  previous,  up
@chapter Basic Operations

It has long been known that the human working memory is very limited
in the number of items it can store. This is often apparent when
developing or debugging software. Sidebrain is a package designed to
take some of the working memory load for many programming tasks.

Sidebrain models the programmer's cognitive activity in a simple,
computer-like, manner, as a stack of tasks and subtasks, with a queue
of suspended stacks which can be suspended and resumed. 

Attached to each task stack may be a collection of observations. 

The basic operations are beginning and ending tasks (pushing and
popping your task stack).

Some more fairly fundamental programmer actions are making
observations, and jotting down reminders of things to do later.

@menu
* Beginning and ending tasks::  Beginning and ending tasks
* Suspending and resuming tasks::  Suspending and resuming tasks
* Observations::                Observations
* Creating reminders::          Creating reminders
@end menu

@node  Beginning and ending tasks, Suspending and resuming tasks, Basic Operations, Basic Operations
@comment  node-name,  next,  previous,  up
@section Beginning and ending tasks

The most basic sidebrain operations are beginning and ending tasks.

To begin a task, enter the command @command{sidebrain-begin-task}. You
will be prompted for some text describing the task. A window or frame
will appear displaying the current task stack, with your newly entered
task on top. (See @ref{Controlling the sidebrain display} for how to
control whether sidebrain uses a frame of its own, and other control
factors.)

To end the topmost task of the stack, enter the command
@command{sidebrain-end-task}. The task will be popped from the stack.

@menu
* Beginning tasks::             Beginning tasks
* Ending tasks::                Ending tasks
@end menu

@node Beginning tasks, Ending tasks, Beginning and ending tasks, Beginning and ending tasks
@subsection Beginning tasks

When you begin a task, it always becomes part of a task stack.  If the
task stack is empty at the time, you are prompted for a project (and
project group) to which the task stack will belong. See @ref{Working
with projects} for details of projects and project groups. 

@node Ending tasks,  , Beginning tasks, Beginning and ending tasks
@subsection Ending tasks

If the task you have just popped has a question mark at the end, you
will be prompted to make an observation. See @ref{Observations} for
more about observations.

(This behaviour is controlled by the variable
@code{sidebrain-auto-ask-info-gathering-results}; it happens if it is
non nil, and contains a regular expression describing
information-gathering tasks.)

If the task came from a ``to do'' comment, the word @samp{todo} in the
comment is changed to @samp{done}. this behaviour is controlled by the
variable @code{sidebrain-mark-done-comments}.

@node  Suspending and resuming tasks, Observations, Beginning and ending tasks, Basic Operations
@comment  node-name,  next,  previous,  up
@section Suspending and resuming tasks

As well as working with stacks made of tasks and subtasks, you can
switch between stacks. You can suspend a task stack, and resume
another. (Suspending your current stack happens automatically on
resuming another; you do not need to do it manually.)

To start a new task stack, from scratch, suspend your old one manually
with the command @command{sidebrain-suspend-task} and start the new
one with the command @command{sidebrain-begin-task}.

There are two ways to select a suspended task and make it current:

@itemize
@item
The command @command{sidebrain-resume-task}, which prompts for a
project group, a project, and a stack to resume.
@item
The task queue browser, run by the command
@command{sidebrain-browse-tasks}, which displays a buffer listing your
task stacks (organised into projects, which are organised into project
groups). See @ref{Browsing the task queue} for details of this. 
@end itemize

See @ref{Working with projects} for details of the sidebrain project
system.

When you suspend a task, it is automatically stored in the project
from which it came. (In fact, it always remains part of that project.)

@node  Observations, Creating reminders, Suspending and resuming tasks, Basic Operations
@comment  node-name,  next,  previous,  up
@section Observations

Programmers frequently make observations, while deciding how to do
something. Sidebrain provides a place to keep them handy.

To make an observation, use the command @command{sidebrain-observe}.
You will be prompted for the text of the observation, which will then
be displayed below your task stack, in the same emacs window.  When
ending a task which ends with a question mark, you will be prompted
automatically for an observation. See @ref{Ending tasks} for the
actions taken on ending a task. 

@node  Creating reminders,  , Observations, Basic Operations
@comment  node-name,  next,  previous,  up
@section Creating reminders

As well as switching out the current task stack to put it into the pool
of tasks, you can create a new, one-level, task stack with the command
@code{sidebrain-reminder}, ready to resume later.

To make a reminder, type @code{sidebrain-reminder}. You will be
prompted in the minibuffer for the text of the reminder, and then for
a project group and project to put the reminder in.

The new task must be assigned to a project -- see @ref{Working with
projects} for an introduction to sidebrain's project system.

@node Working with projects, Browsing the task queue, Basic Operations, Top
@comment  node-name,  next,  previous,  up
@chapter Working with projects

Sidebrain organizes your work into projects, which are arranged in
project groups. If you have a large number of suspended tasks or
reminders, this helps you to find them more easily.

@menu
* Creating projects and groups::  
* Selecting projects and groups::  
* Deleting projects and groups::  
* Task priorities::             
@end menu

@node  Creating projects and groups, Selecting projects and groups, Working with projects, Working with projects
@comment  node-name,  next,  previous,  up
@section Creating projects and groups

Projects can exist only as part of a project group, so before you can
create any projects, you will need to create at least one project
group to put them in.

You can create a project group with the command
@command{sidebrain-new-project-group}. This will prompt for a name for
the group. The newly-created project group will become the current
project group. See @ref{Selecting projects and groups} for how to
change the current project.

You can create a project with the command
@command{sidebrain-new-project}. The new project will be in the
current project group, and will become the current project.

@c todo: Make sure that this is offered as the default project into which
@c new task stacks will go, and also for reminders. 

@node  Selecting projects and groups, Deleting projects and groups, Creating projects and groups, Working with projects
@comment  node-name,  next,  previous,  up
@section Selecting projects and groups

You can select a project group, and a project within it, using the
tasks browser @ref{Browsing the task queue}, or with the commands
@command{sidebrain-set-project-group} and
@command{sidebrain-set-project}.

@menu
* Selecting project groups::    Selecting project groups
* Selecting projects::          Selecting projects within a project group
@end menu

@node  Selecting project groups, Selecting projects, Selecting projects and groups, Selecting projects and groups
@comment  node-name,  next,  previous,  up
@subsection Selecting project groups

You can use the command @command{sidebrain-set-project-group} to
select a project group. This offers completion on the names of
existing project groups. Until you also select a project within the
group @ref{Selecting projects}, or create a new one @ref{Creating
projects and groups}, which also selects the new project
automatically.

You can create a new project group; see @ref{Creating projects and groups}.

@node  Selecting projects,  , Selecting project groups, Selecting projects and groups
@comment  node-name,  next,  previous,  up
@subsection Selecting projects

Having selected a project group, you can use the command
@command{sidebrain-set-project} to select a project within it. This
offers completion on the project names within the group.

@node  Deleting projects and groups, Task priorities, Selecting projects and groups, Working with projects
@comment  node-name,  next,  previous,  up
@section Deleting projects and groups

@c write the code to handle this! 

@node  Task priorities,  , Deleting projects and groups, Working with projects
@comment  node-name,  next,  previous,  up
@section Task priorities

@c implement these fully! 

@node  Browsing the task queue, Saving and restoring, Working with projects, Top
@comment  node-name,  next,  previous,  up
@chapter Browsing the task queue

To select a task interactively, you can either use the command
@code{sidebrain-resume-task} (see ), or an interactive task queue browser
which you can run using @code{sidebrain-browse-tasks}. 

@node  Saving and restoring, Using comments in files, Browsing the task queue, Top
@comment  node-name,  next,  previous,  up
@chapter Saving and restoring

You can save your sidebrain data into a file, and load it again in a
later session.

If you want to keep data from session to session, put a call to

@lisp
(sidebrain-load-from-file)
@end lisp

in your .emacs, and

@lisp
(sidebrain-save-to-file)
@end lisp

somewhere where it will be called as you exit emacs.

You can also run these commands interactively.

Alternatively, you can set the variable
@code{sidebrain-save-after-commands} to something other than nil, and
each sidebrain operation will save the file automatically.

To customize the save further, see @ref{Customizing the save}.

@node  Using comments in files, Installation and configuration, Saving and restoring, Top
@comment  node-name,  next,  previous,  up
@chapter Using comments in files

Sidebrain can read comments of the form @samp{todo: thing to do} and
convert those into tasks; it also remembers where these tasks came from,
and changes the @samp{todo} to @samp{done} when you end those tasks.

See @ref{Ending tasks} for more about ending tasks.

@node Installation and configuration,  , Using comments in files, Top
@comment  node-name,  next,  previous,  up
@chapter Installation and configuration

Sidebrain is written entirely in elisp, and controlled through elisp
variables. It saves its persistent data in XML files, and you can
specify where these are to be stored.

@menu
* Installing sidebrain::        Installing sidebrain
* Configuring sidebrain::       Configuring sidebrain
@end menu

@node  Installing sidebrain, Configuring sidebrain, Installation and configuration, Installation and configuration
@comment  node-name,  next,  previous,  up
@section Installing sidebrain

To install sidebrain, unpack the tarball into a directory, and place
that directory onto @code{load-path}.

Either load it from your .emacs, or arrange autoloads to load it on
demand.

@node  Configuring sidebrain,  , Installing sidebrain, Installation and configuration
@comment  node-name,  next,  previous,  up
@section Configuring sidebrain

You can see all the configuration variables in @file{sidebrain-vars.el}.

@menu
* Controlling the sidebrain display::  
* Customizing the save::        
@end menu

@node  Controlling the sidebrain display, Customizing the save, Configuring sidebrain, Configuring sidebrain
@comment  node-name,  next,  previous,  up
@subsection Controlling the sidebrain display


@node  Customizing the save,  , Controlling the sidebrain display, Configuring sidebrain
@subsection Customizing the save

You can change where sidebrain stores its data, by setting the variable
@code{sidebrain-file-name}.

You may want filenames to be usable on several machines (if, for
example, you keep your work on a fileserver or on removable media, which
may have different mount points on different hosts). To help with this,
you can set the hooks @code{sidebrain-filename-save-hooks} and
@code{sidebrain-filename-load-hooks} which should hold functions which
take a filename and, if they want to modify it, return the modified
version, otherwise return nil.

You can write code to put environment variables into the names on saving, and use
@code{substitute-in-file-name} to substitute the appropriate values on
the new host.

If you want to send sidebrain task lists by email, you may also want to
use these hooks to make the names relative to a project directory.


@bye
